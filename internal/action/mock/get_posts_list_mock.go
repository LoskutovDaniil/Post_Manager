// Code generated by MockGen. DO NOT EDIT.
// Source: get_posts_list.go
//
// Generated by this command:
//
//	mockgen -source=get_posts_list.go -destination=mock/get_posts_list_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/LoskutovDaniil/OzonTestTask2024/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockGetPostsListRepository is a mock of GetPostsListRepository interface.
type MockGetPostsListRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGetPostsListRepositoryMockRecorder
}

// MockGetPostsListRepositoryMockRecorder is the mock recorder for MockGetPostsListRepository.
type MockGetPostsListRepositoryMockRecorder struct {
	mock *MockGetPostsListRepository
}

// NewMockGetPostsListRepository creates a new mock instance.
func NewMockGetPostsListRepository(ctrl *gomock.Controller) *MockGetPostsListRepository {
	mock := &MockGetPostsListRepository{ctrl: ctrl}
	mock.recorder = &MockGetPostsListRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetPostsListRepository) EXPECT() *MockGetPostsListRepositoryMockRecorder {
	return m.recorder
}

// GetPostsList mocks base method.
func (m *MockGetPostsListRepository) GetPostsList(ctx context.Context, filter model.PostsFilter) ([]model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostsList", ctx, filter)
	ret0, _ := ret[0].([]model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostsList indicates an expected call of GetPostsList.
func (mr *MockGetPostsListRepositoryMockRecorder) GetPostsList(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostsList", reflect.TypeOf((*MockGetPostsListRepository)(nil).GetPostsList), ctx, filter)
}
