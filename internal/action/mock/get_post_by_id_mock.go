// Code generated by MockGen. DO NOT EDIT.
// Source: get_post_by_id.go
//
// Generated by this command:
//
//	mockgen -source=get_post_by_id.go -destination=mock/get_post_by_id_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/LoskutovDaniil/OzonTestTask2024/internal/model"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockGetPostByIDRepository is a mock of GetPostByIDRepository interface.
type MockGetPostByIDRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGetPostByIDRepositoryMockRecorder
}

// MockGetPostByIDRepositoryMockRecorder is the mock recorder for MockGetPostByIDRepository.
type MockGetPostByIDRepositoryMockRecorder struct {
	mock *MockGetPostByIDRepository
}

// NewMockGetPostByIDRepository creates a new mock instance.
func NewMockGetPostByIDRepository(ctrl *gomock.Controller) *MockGetPostByIDRepository {
	mock := &MockGetPostByIDRepository{ctrl: ctrl}
	mock.recorder = &MockGetPostByIDRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetPostByIDRepository) EXPECT() *MockGetPostByIDRepositoryMockRecorder {
	return m.recorder
}

// GetPostByID mocks base method.
func (m *MockGetPostByIDRepository) GetPostByID(ctx context.Context, id uuid.UUID) (model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostByID", ctx, id)
	ret0, _ := ret[0].(model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostByID indicates an expected call of GetPostByID.
func (mr *MockGetPostByIDRepositoryMockRecorder) GetPostByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostByID", reflect.TypeOf((*MockGetPostByIDRepository)(nil).GetPostByID), ctx, id)
}
