// Code generated by MockGen. DO NOT EDIT.
// Source: get_comments_list.go
//
// Generated by this command:
//
//	mockgen -source=get_comments_list.go -destination=mock/get_comments_list_mock.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/LoskutovDaniil/OzonTestTask2024/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockGetCommentsListRepository is a mock of GetCommentsListRepository interface.
type MockGetCommentsListRepository struct {
	ctrl     *gomock.Controller
	recorder *MockGetCommentsListRepositoryMockRecorder
}

// MockGetCommentsListRepositoryMockRecorder is the mock recorder for MockGetCommentsListRepository.
type MockGetCommentsListRepositoryMockRecorder struct {
	mock *MockGetCommentsListRepository
}

// NewMockGetCommentsListRepository creates a new mock instance.
func NewMockGetCommentsListRepository(ctrl *gomock.Controller) *MockGetCommentsListRepository {
	mock := &MockGetCommentsListRepository{ctrl: ctrl}
	mock.recorder = &MockGetCommentsListRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetCommentsListRepository) EXPECT() *MockGetCommentsListRepositoryMockRecorder {
	return m.recorder
}

// GetCommentsList mocks base method.
func (m *MockGetCommentsListRepository) GetCommentsList(ctx context.Context, filter model.CommentsFilter) ([]model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsList", ctx, filter)
	ret0, _ := ret[0].([]model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsList indicates an expected call of GetCommentsList.
func (mr *MockGetCommentsListRepositoryMockRecorder) GetCommentsList(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsList", reflect.TypeOf((*MockGetCommentsListRepository)(nil).GetCommentsList), ctx, filter)
}
